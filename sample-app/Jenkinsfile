
def dockerCredential = "docker_credential"
def imageTag = "DOCKER_REPOSITORY:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"

pipeline {
  agent {
    kubernetes {
      label 'sample-app'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: maven
    image: maven:3.5.2-jdk-8-alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - name: maven
      mountPath: /root/.m2
  - name: docker
    image: docker
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker
      mountPath: /var/run/docker.sock
  volumes:
  - name: maven
    persistentVolumeClaim:
      claimName: maven-cache-pvc
  - name: docker
    hostPath:
      path: /var/run/docker.sock
"""
}
  }
  stages {
    stage('Maven Build') {
      steps {
        container('maven') {
          sh 'mvn clean package -Dmaven.repo.local=/root/.m2/${JOB_NAME}'
        }
      }
    }
      
    stage('Docker Build') {
      steps {
        container('docker') {
            withCredentials([usernamePassword(credentialsId: dockerCredential, passwordVariable: 'dockerPassword', usernameVariable: 'dockerUser')]) {
                sh 'docker login -u ' + dockerUser + ' -p ' + dockerPassword
                sh 'docker build -t ' + imageTag + ' .'
                sh 'docker push ' + imageTag
            }
        }
      }
    }
      
  }
}
  
